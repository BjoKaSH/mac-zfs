#!/bin/bash
# Copyright 2010 Alex Blewitt
#
# several enhancements (C) 2013 Bjoern Kahl
# - support for multiple kexts
# - support for relase and debug kernels
#
# Parses a panic log
#
# Note that this currently only works on 10.6 and possibly newer platforms
#
GDB=/usr/bin/gdb
[ -x ${GDB} ] || GDB=/Developer/usr/bin/gdb
KU=/usr/bin/kextutil
AWK=/usr/bin/awk
SED=/usr/bin/sed
GREP=/usr/bin/grep
KitPath=/Volumes/KernelDebugKit
DEBUG_KERNEL=
GDB_KERNEL=/mach_kernel
DEBUG_KERNEL_IMG=""
myTmpDir=$(mktemp -d -t maczfs-panic-decode)
SymDir=${myTmpDir}/Syms
if ! mkdir ${SymDir} ; then
	echo "Failed to create temporary directory '${SymDir}'.  Giving up."
	exit 1
fi
# MacZFS stable uses zfs.kext, OSX-ZFS uses additionaly spl.kext
Kext=(/System/Library/Extensions/zfs.kext /System/Library/Extensions/spl.kext)
KextCnt=2
TEMPDOC=${myTmpDir}/kext.gdb
TEMPAWK=${myTmpDir}/kext.awk
keeptmp=0
dosourcelist=0
sourcedir=""

while [ $# -gt 0 ] ; do
	if [ "${1}" == "-h" -o  "${1}" == "--help" ] ; then
		echo "Usage:"
		echo "$0 [ -h | --help ] [ -k ] [ -r ] [ -s ] [ -a source_dir ] [ -g kernel_file ] [ panic_file [ path_to_kext ... ] ]"
		echo " -h, --help : This help."
		echo " -k  : Keep symbol file(s) and gdb command files."
		echo " -r  : Reset list of kext bundles, use only kexts on command line."
		echo " -s  : Attempt to generate source listing for kext adresses.  Requires (1) the dSYM bundle"
		echo "       for all kexts and (2) the actual source files present."
		echo " -a source_dir    : Alternative source directory, implies '-s'."
		echo "       Note: GDB does not allow spaces in the source path!"
		echo " -g kernel_file   : kernel to use for linking kexts.  Must be the same as the kernel"
		echo "       that generated the panic.  Defaults to '/mach_kernel'."
		echo " -d debug_kernel  : kernel file with debug symbols corresponding to the kernel"
		echo "       that generated the panic.  Defaults to '${KitPath}/mach_kernel' if present, else none."
		echo "       Overrides '-g kernel_file' if specified."
		echo " panic_file       : The panic to decode."
		echo " path_to_kext ... : Additional kexts to consider for symbol resolution."
		echo "       You must also name a panic file to be able to name additional kexts."
		echo "       Try '--' as panic file to use the default.  Use '-' to read panic from STDIN."
		rm -r ${myTmpDir}
		exit 0
	fi
	if [ "${1}" == "-k" ] ; then
		keeptmp=1
		shift
		continue
	fi
	if [ "${1}" == "-r" ] ; then
		KextCnt=0
		unset Kext
		shift
		continue
	fi
	if [ "${1}" == "-s" ] ; then
		dosourcelist=1
		shift
		continue
	fi
	if [ "${1}" == "-a" ] ; then
		sourcedir="${2}"
		dosourcelist=1
		shift
		shift
		continue
	fi
	if [ "${1}" == "-g" ] ; then
		GDB_KERNEL="${2}"
		shift
		shift
		continue
	fi
	if [ "${1}" == "-d" ] ; then
		DEBUG_KERNEL_IMG="${2}"
		shift
		shift
		continue
	fi
	if [ -z "${PANIC}" ] ; then
		PANIC="${1}"
		shift
		continue
	else
		Kext[${KextCnt}]="${1}"
		((KextCnt++))
		shift
	fi
done

# Determine OS X version
osxrel_str=$(uname -r)
osxrel=$(expr ${osxrel_str} : '[0-9]*\.\([0-9][0-9]*\)')
if [ ${osxrel} -eq 5 ] ; then
	# For 10.5 systems
	PANICS='/Library/Logs/PanicReporter'
else
	# All else
	PANICS='/Library/Logs/DiagnosticReports'
fi

if [ "${PANIC}" == "--" ] ; then
	PANIC=""
elif [ "${PANIC}" == "-" ] ; then
	PANIC=${myTmpDir}/stdin.panic
	echo "Reading panic log from STDIN ..."
	cat >${PANIC}
	echo "Done reading panic log."
fi
if [ -z "${PANIC}" ]
then
	PANIC=`${GREP} -l zfs.fs "${PANICS}"/*.panic | tail -n 1`
	echo "No panic file given, assuming '${PANIC}'"
fi

if [ ! -x ${GDB} ] ; then
	echo "Cannot find gdb at '${GDB}'"
	rm -r ${myTmpDir}
	exit 1
fi

if [ ! -x ${KU} ] ; then
	echo "Cannot find kextutil at '${KU}'"
	rm -r ${myTmpDir}
	exit 1
fi

if [ ! -r "${PANIC}" ] ; then
	echo "File '${PANIC}' is not a readable panic log, which are usually found in '${PANICS}'."
	rm -r ${myTmpDir}
	exit 1
fi

ARCH=$(${AWK} '/[a-z]+:xnu/ { gsub("^.*/(RELEASE|DEBUG)_",""); print tolower($0) }' "${PANIC}")

# This is a bit ugly, but we need to deal with file names with spaces,
# Therefore the quoting here and the 'eval' when calling kextutil.
if [ ! -z "${DEBUG_KERNEL_IMG}" ] ; then
	# debug kernel specified
	DEBUG_KERNEL="-no-system-extensions -kernel \"${DEBUG_KERNEL_IMG}\""
	GDB_KERNEL="${DEBUG_KERNEL_IMG}"
elif [ -f "${KitPath}/mach_kernel" ] ; then
	DEBUG_KERNEL="-no-system-extensions -kernel \"${KitPath}/mach_kernel\" -repository \"${KitPath}\""
	GDB_KERNEL="${KitPath}/mach_kernel"
else
	DEBUG_KERNEL="-kernel \"${GDB_KERNEL}\""
fi

# check if the kernel has a changed load address (Mavericks and up)
KERNELBASE=$(${AWK} '/Kernel text base/ {print $4};' "${PANIC}")
KERNELSLIDE=$(${AWK} '/Kernel slide/ {print $3};' "${PANIC}")

echo "set kext-symbol-file-path ${SymDir}" > ${TEMPDOC}
if [ ! -z "sourcedir" ] ; then
	echo "dir ${sourcedir}" >> ${TEMPDOC}
fi

# Determine which kext bundles are involved in the backtrace.
# This will be later used to find the source file and line for backtrace addresses
# in the respective kexts.
okcnt=0
bundlelist[0]=""
kextlist[0]=""
for i in "${Kext[@]}" ; do
	if [ -d "${i}" ] ; then
		BUNDLE=$(${SED} -e '/CFBundleIdentifier/,/string/ p; d' <"${i}/Contents/Info.plist" | ${SED} -e '/string/ { s%[[:space:]]*<string>%%; s%</string>%%; p;} ; d' | head -1)
		if [ -z "${BUNDLE}" ] ; then
			echo "No bundle ID found in '${i}'. Skipping."
			continue
		fi
		skipit=0
		for ((i2=0;i2<okcnt;i2++)) ; do
			if [ "${bundlelist[${i2}]}" == "${BUNDLE}" ] ; then
				echo "Error: kext '${i}' defines same bundle ID as '${kextlist[${i2}]}'.  Skipping '${i}'."
				skipit=1
				break;
			fi
		done
		if [ ${skipit} -eq 1 ] ; then
			continue
		fi
		ADDRESSES=$(${AWK} '/^[[:space:]]+'${BUNDLE}'.*@0x/ { gsub("^ *|->.*$|\\(.*\\)|\[[0-9A-F-]+\]","");print "-address",$0 }' "${PANIC}")
		if [ -z "${ADDRESSES}" ] ; then
			echo "No addresses found for '${BUNDLE}'. Skipping."
			continue
		fi
		# kextutil must be able to find all symbols referenced by the current kext.
		# Construct list of possible dependencies to consider when searching symbols
		deplist=""
		# This is a bit ugly, but we need to deal with file names with spaces,
		# Therefore the quoting and the 'eval'.
		for i2 in "${Kext[@]}" ; do
			if [ "${i}" != "${i2}" ] ; then
				deplist="${deplist} -d \"${i2}\""
			fi
		done
		eval ${KU} -quiet -no-caches ${DEBUG_KERNEL} -no-load -no-authentication -symbols ${SymDir} -arch ${ARCH}  ${deplist} \"${i}\" ${ADDRESSES}  </dev/null
		if [ $? -ne 0 ] ; then
			echo "No symbols generated at '${SymDir}'."
		else
			bundlelist[${okcnt}]=${BUNDLE}
			kextlist[${okcnt}]="${i}"
			okcnt=$((${okcnt} + 1))
			echo "add-kext \"${i}\"" >> ${TEMPDOC}
		fi
	fi
done

# without symbols from kextutil, we can't translate to source file and line.
# But we could still try to identify the kernel functions in the backtrace.
# Ask user what to do.
if [ ${okcnt} -eq 0 ] ; then
	read -p  "No symbols generated!  Proceed anyway? (y/n)" ans
	if [ "${ans}" != "y" ] ; then
		rm -r ${myTmpDir}
		exit 1
	fi
fi


if [ -z "${KERNELSLIDE}" ] ; then
	${AWK} '/^0x/ {print "x/i " $3;}' < "${PANIC}" >> ${TEMPDOC}
else
	${AWK} '/^0x/ {if ($3 "" > "'${KERNELBASE}'") { print "x/i " $3 " - '"${KERNELSLIDE}"'"; } else {print "x/i " $3;} }' < "${PANIC}" >> ${TEMPDOC}
fi

if [ ${dosourcelist} -eq 1 ] ; then
	echo "BEGIN {" >${TEMPAWK}
	echo "cnt=0;" >>${TEMPAWK}
	for i in "${bundlelist[@]}" ; do
		addr=($(${AWK} '/^[[:space:]]+'${i}'.*@0x/ { gsub("^[ a-z.]+@|\\(.*\\)|\[[0-9A-F-]+\]","");gsub("->"," ");print $0; }' "${PANIC}"))
		echo "startaddr[cnt]=\"${addr[0]#*@}\";"
		echo "endaddr[cnt++]=\"${addr[1]}\";"
	done >>${TEMPAWK}
	echo "}" >>${TEMPAWK}

	cat >>${TEMPAWK} <<EOF
/^0x/ {
	for(i=0 ; i < cnt ; i++) {
		if ( (startaddr[i] < \$3) && (\$3 < endaddr[i]) )
			print "list *" \$3;
	}
}
EOF

	${AWK} -f ${TEMPAWK} < "${PANIC}" >> ${TEMPDOC}
fi

echo quit >> ${TEMPDOC}

${GDB} -batch -arch ${ARCH} -x ${TEMPDOC} "${GDB_KERNEL}"
if [ $? -ne 0 -a ${keeptmp} -eq 0 ] ; then
	read -p "GDB returned failure.  Keep gdb script and symbol files ? (Y/n) " ans
	if [ "${ans}" != "n" ] ; then
		keeptmp=1
	fi
fi

if [ ${keeptmp} -eq 0 ] ; then
	rm -r ${myTmpDir}
else
	echo "Keeping symbol files and gdb command file at '${myTmpDir}'."
fi

# End
